package datahandler;

import java.io.BufferedReader;
import java.io.File;

import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.util.ArrayList;

import javax.swing.JOptionPane;

public class DataHandler {
	
    
    
	//display user input to console
	private static void viewData(String txtTicker,String txtName,String txtPrice,String txtQuantity,String txtDate) {
		
		//Display ledger record
		System.out.println("Ticker: "+txtTicker+"\nName: "+txtName+"\nPrice"+txtPrice+"\nQuantity: "+txtQuantity+"\nDate: "+txtDate);	
	
	}//end method
        
        
        
        //display user input to console
        private static void viewData(ArrayList<String> data) {
		
		//Display ledger record
		for(int i=0;i<data.size();i++){
                    System.out.println(data.get(i));
                }
        
	
	}//end method
	
	
        
        public static void saveTrade(ArrayList<String> data,String fileName){
            
            //
            String extractData="";
            File file= new File(fileName);
            PrintWriter pW=null;
		
		//try to access file location
		try
		{
			//if file does not exist create one
			if(!file.exists())file.createNewFile();
			pW=new PrintWriter (new FileOutputStream(fileName,true));
                        
			//write to file if string is not empty
                        
                        FileOutputStream writeData=new FileOutputStream(fileName);
                        ObjectOutputStream writeStream=new ObjectOutputStream(writeData);
                        
                        
                        if(validateInput(data))
                        {
                            //write user input to txt file
                            for(String i : data){
                                writeStream.writeObject(i+" ");
                            }
                            
                            writeStream.flush();
                            writeStream.close();
                                    
                        }
                        
		}
		catch (IOException ioex) {
			//display error message
			JOptionPane.showMessageDialog(null, "IOException Error");
		}
		
                viewData(data);
            
        }
        
        //save user input into text file
	public static void saveTrade(String txtTicker,String txtName,String txtPrice,String txtQuantity, String txtDate,String fileName, ArrayList<String> data)
	{
		
		//create printWriter object
		
		File file= new File(fileName);
		PrintWriter pW=null;
		boolean test=false;
                
                
		//try to access file location
		try
		{
                       
                            
                            test=validateEmptyInput(data);
                            
                            if(!test)
                            {
                                JOptionPane.showMessageDialog(null, "Invalid Input Error! Empty Input!");     
                            }  
                            else 
                            {
                                //if file does not exist create one
                                if(!file.exists())file.createNewFile();
                                pW=new PrintWriter (new FileOutputStream(fileName,true));
                                //write to file

                                //write user input to txt file

                                pW.append("\n"+txtTicker+","+txtName+","+txtPrice+","+txtQuantity+","+txtDate);
                                pW.flush();
                                pW.close();
                            }
                        
                            
                    
                        
                        if(true){
                            //if file does not exist create one
                            if(!file.exists())file.createNewFile();
                            pW=new PrintWriter (new FileOutputStream(fileName,true));
                            //write to file

                            //write user input to txt file

                            pW.append("\n"+txtTicker+","+txtName+","+txtPrice+","+txtQuantity+","+txtDate);
                            pW.flush();
                            pW.close();
                        }
			
			
		}
		catch (IOException ioex) {
			//display error message
			JOptionPane.showMessageDialog(null, "IOException Error");
		}
		finally
		{
			//empty writer and close the file
			if(pW != null) {
				pW.flush();
				pW.close();
			}//endIf
			viewData(txtTicker,txtName,txtPrice,txtQuantity,txtDate);
		}
	}//end saveTrade
        
	
	//load saved data into table
	public static void loadDataFromFile(String filePath, ArrayList<String> content) {

		
		try {
			File file=new File(filePath);
			FileReader fReader=new FileReader(filePath);
			BufferedReader bReader=new BufferedReader(fReader);
			String line;
			while((line=bReader.readLine())!=null) {
				content.add(line);
			}
			fReader.close();
		}
		catch(IOException e) {
			System.out.println("File operation failure!");
			System.out.println(e);
			
		}//end
	
	}//end method
        
        public static boolean validateEmptyInput(ArrayList<String> data){
                boolean[] test=new boolean[data.size()];

                for(int i =0 ; i < data.size();i++){    
                    test[i]=isNumeric(data.get(i));
                }
                
                for(boolean testCase : test){
                    if(!testCase)
                        return false;
                }
            
                
                return true;
        }
        
        
        
        public static boolean validateInput(String txtTicker,String txtName, String txtPrice, String txtQuantity, String txtDate){
            boolean emptyString;
            
            //Check user input for empty strings
            
            
            emptyString=checkEmptyString(txtTicker);
            if(!emptyString)
                JOptionPane.showMessageDialog(null,"Empty String Input");
            
            emptyString=checkEmptyString(txtName);
            if(!emptyString)
                JOptionPane.showMessageDialog(null,"Empty String Input");
            
            emptyString=checkEmptyString(txtPrice);
            if(!emptyString)
                JOptionPane.showMessageDialog(null,"Empty String Input");
            
            emptyString=checkEmptyString(txtQuantity);
            if(!emptyString)
                JOptionPane.showMessageDialog(null,"Empty String Input");
            
            emptyString=checkEmptyString(txtDate);
            if(!emptyString)
                JOptionPane.showMessageDialog(null,"Empty String Input");
            
            
           
            return emptyString;
            
        }//end validateInput()
        
        public static boolean validateInput(ArrayList<String> data){
            boolean[] emptyString=new boolean[5];
            
            for(int i=0;i<emptyString.length;i++){
                emptyString[i]=checkEmptyString(data.get(i));
                
            }
            
           for(boolean test : emptyString){
               if(!test){
                   JOptionPane.showMessageDialog(null,"Invalid Input");
                   return test;
                   
               }
               break;
           }
            
            
            
                  
                    
            return true;
        }
        
        public static boolean isNumeric(String line){
            return line!=null && line.matches("[+]?\\d*\\d+");
        }
        
        
        public static boolean checkEmptyString(ArrayList<String> data){
            boolean test=false;
            
            for(int i=0;i<data.size();i++){
                test=checkEmptyString(data.get(i));
                if(!test)
                    JOptionPane.showMessageDialog(null,"Empty String Input. ArrayList");
            }
            
            return test;
            
        }
        
        
        //check String if its null or empty
        private static boolean checkEmptyString(String line){
            boolean test=true;
            
            while(line==null || line.equals("")){
               // JOptionPane.showMessageDialog(null,"Empty String Input");
                test=false;
                break;
                
            }
            return test;
        }//end
        
	
}//end class
